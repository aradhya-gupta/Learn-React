{"version":3,"sources":["logo.svg","ButtonContent.js","Grid.js","InputNames.js","Begin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ButtonContent","state","content","handleClick1","setState","className","handleClick2","Button","variant","onClick","this","onDoubleClick","Component","Grid","Container","Row","Col","xs","InputNames","player1","player2","handle1","e","target","value","handle2","InputGroup","size","Prepend","Text","style","backgroundColor","border","FormControl","type","textAlign","fontFamily","fontWeight","placeholder","onChange","id","Begin","useState","open","setOpen","aria-controls","aria-expanded","Collapse","in","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46cd295e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport default class ButtonContent extends Component {\r\n    \r\n    state ={\r\n        content: \".\"\r\n    }\r\n     handleClick1 = () =>{\r\n         this.setState({content:<h1 className=\"cross\">X</h1>});\r\n     }\r\n\r\n     handleClick2 = () =>{\r\n        this.setState({content:<h1 className=\"zero\">O</h1>});\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button className=\"ticbut\" variant=\"dark\" onClick={this.handleClick1} onDoubleClick={this.handleClick2} >{this.state.content}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport ButtonContent from './ButtonContent.js'\r\n\r\nexport default class Grid extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n              <Row>\r\n            \r\n              <Col>CLICK ONCE FOR CROSS</Col>\r\n              \r\n                  <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n              \r\n              <Col>CLICK TWICE FOR ZERO</Col>\r\n              </Row>\r\n              \r\n              <Row>\r\n              <Col></Col>\r\n              <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n              <Col></Col>\r\n              </Row>\r\n\r\n              <Row>\r\n              <Col></Col>\r\n              <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n                  <Col xs=\"auto\">\r\n                   <ButtonContent/>\r\n                  </Col>\r\n              <Col></Col>\r\n              </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default class InputNames extends Component {\r\n\r\n    state = {\r\n        player1: \"\",\r\n        player2: \"\"\r\n    }\r\n\r\n    handle1 = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({ player1: e.target.value });\r\n    }\r\n    handle2 = (e) => {\r\n        // console.log(e.target.value);\r\n        this.setState({ player2: e.target.value });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <InputGroup className=\"mb-3\" size=\"lg\">\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text style={{ backgroundColor: \"aqua\", border: \"solid black\" }}>PLAYER1</InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl type=\"text\" style={{ textAlign: \"right\", fontFamily: \"Times New Roman\", fontWeight: \"900\" }}\r\n                        placeholder=\"Enter your name here player1\" onChange={this.handle1} />\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text id=\"basic-addon1\"><strong>VS</strong></InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl type=\"text\" style={{ fontFamily:\"Times New Roman\",fontWeight:\"900\"}}\r\n                        placeholder=\"Enter your name here player2\" onChange={this.handle2} />\r\n                    <InputGroup.Prepend>\r\n                        <InputGroup.Text style={{ backgroundColor: \"aqua\", border: \"solid black\" }} > PLAYER2 </InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                </InputGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Collapse from 'react-bootstrap/Collapse'\r\nimport InputNames from './InputNames'\r\n\r\nfunction Begin() {\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"outline-info\"\r\n          onClick={() => setOpen(!open)}\r\n          aria-controls=\"example-collapse-text\"\r\n          aria-expanded={open}\r\n        >\r\n          BEGIN GAME\r\n        </Button>\r\n        <div><br/><br/><br/></div>\r\n        <Collapse in={open}>\r\n          <div id=\"example-collapse-text\">\r\n           <h3>ENTER PLAYER NAMES</h3>\r\n           <br/>\r\n           <InputNames/>\r\n          <br/>\r\n            <h3>INSTRUCTIONS</h3>\r\n            <ul>\r\n              <li>Player1 takes cross while player2 takes zero.</li>\r\n              <li>Single click on a tile below for filling a cross while double click for zero. </li>\r\n              <li>The player who first fills a row/column/diagonal with all zeroes/crosses wins.</li>\r\n            </ul>\r\n            <h4>\r\n            GOOD LUCK!</h4>\r\n          <br/><br/>\r\n          </div>\r\n        </Collapse>\r\n      </>\r\n    );\r\n  }\r\n  \r\nexport default Begin;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Grid from './Grid.js'\n\nimport Begin from './Begin.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>TIC-TAC-TOE</h1>\n      </header>\n\n      <div><br/><br/><hr/>\n      <h1 className=\"begin_head\">IT IS A TWO-PLAYER FUN GAME!</h1>\n      <hr/></div>\n\t\n      <Begin/>\n      <Grid/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}